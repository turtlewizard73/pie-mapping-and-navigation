<?xml version="1.0"?>

<launch>

  <!-- RViz config file -->
  <arg name="rvizconfig" default="$(find pie_bringup)/rviz/turtlebot3.rviz" />
  <arg name="world" default="$(find pie_bringup)/worlds/world_basic.world" />
  <arg name="turtlebot_model" default="burger"/>
  <param name="robot_description" command="$(find xacro)/xacro
      $(find turtlebot3_description)/urdf/turtlebot3_$(arg turtlebot_model).urdf.xacro" />

  <arg name="model" default="$(find pie_bringup)/urdf/mogi_bot.xacro"/>

  <!-- Robot pose -->
  <!-- Inititalize it's position in the desired location inside the world -->
  <arg name="x_pos" default="2.5"/>
  <arg name="y_pos" default="1.5"/>
  <arg name="z_pos" default="0"/>
  <arg name="roll" default="0"/>
  <arg name="pitch" default="0"/>
  <arg name="yaw" default="0"/>

  <!-- Launch Gazebo world -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world)"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>

  <!-- Find turtlebot description and send urdf to param server -->
  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model turtlebot3_$(arg turtlebot_model)
    -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />

  <!-- Launch Rviz /TODO: make own rviz config-->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rvizconfig)"
    required="true"/>

  <!-- Send joint values-->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
  </node>

  <!-- Send robot states to tf -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
    respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="50.0" />
  </node>

  <!-- Launch trajectory server -->
  <!-- <node pkg="hector_trajectory_server" type="hector_trajectory_server" respawn="false" name="hector_trajectory_server" output="screen">
    <param name="source_frame_name" value="base_footprint"/>
    <param name="target_frame_name" value="odom"/>
  </node> -->
</launch>